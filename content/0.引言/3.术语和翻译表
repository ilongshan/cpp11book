一些语言概念经常会因为翻译不同而产生不一样的术语, 这里简要说明在书中会出现的术语.

|! 英文 | 中文 | 概念简述
| base / parent class | 基类 / 父类 | 类的继承关系中, 被继承的一方
| derived / sub class | 派生类 / 子类 | 类的继承关系中, 继承的一方
| lvalue / left value | 左值 | 赋值时等号左侧的对象; 在 C++ 中也可以理解为 locator value, 即为指向一个非临时对象的引用
| overload | 重载 | 同名函数以不同个数或不同类型参数区分
| override | 覆盖 | 子类重新实现父类中定义的相同签名的函数
| virtual | 虚 | 多态需要运用的虚函数, 虚继承机制
| `const` and `volatile` qualifier | cv 修饰符 | 对象定义时可能使用的 `const` 或 `volatile` 修饰的统称
| template | 模板 | 将类型或其他整数型特性参数化的机制, 可应用于类或函数
| specialization | 特化 | 将类型参数或整数型参数代入模板, 形成具体类型或函数
| partial specialization | 偏特化 | 为代入部分或全部模板参数的模板类提供特殊定义的机制
| namespace | 名字空间 | 标识符定义的一种作用域
| undefined behaviour | 未定义行为 | 不正确或遗漏边界条件的程序编写方式, 使得代码可以通过编译, 但其一定条件下的运行时行为无法预测
| trivial / non-trivial | 平凡 / 非平凡 | 类型实例在复制时是否需要执行除了复制各成员的值之外的代码, 析构函数非虚函数且不执行任何代码; 通常这些代码用以处理实例内含的一些系统资源, 如堆内存等

一些语言关键字相关的概念, 不翻译, 直接使用英文单词, 包括

| `public` / `protected` / `private` | 访问或继承限定
| `const` | 不可更改限定
| `new` / `delete` | 对象创建, 销毁
| `typename` | 用于模板的类型名参数
| nul | 字符串字面量取值为整数 0 结束符
