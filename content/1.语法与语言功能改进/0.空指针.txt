作为较早引入 "指针" 这一概念的语言, C 和 C++ 中在处理空指针的时候却并没有起到表率作用. 用户一般会用 `NULL` 来表示空指针, 但它并不是关键字, 而是一个宏. 在 C 中它通常被定义为 `(void*)0`, 而 C++ 中因为禁止 `void*` 指针类型向其他指针类型隐式转换, 因此在既有的编译器实现中它通常被定义为整数字面量 0, 或是其它不那么明确的指针常量.

这是个很容易让编译器产生误解的规则. 比如在 C++ 中以 `NULL` 作为实参时, 可能使得重载决议出错

```+
void f(int x) { std::cout << "overload int" << std::endl; }
void f(int* p) { std::cout << "overload int ptr" << std::endl; }

f(NULL); // NULL 被定义为 0 时输出 "overload int", 而另一些实现会报重载决议错误
         // 而不会直接决议为对 f(int*) 的调用
```

在 C++11 中引入新的空指针**关键字** `nullptr` 来解决这一问题. 不过, 考虑到向前兼容性, `NULL` 宏的定义并没有被直接改成这一关键字, 要使用它的话必须写上 `nullptr` 这一名字. 如, 修改上面的代码为

```
f(nullptr); // 输出为 overload int ptr
```

`nullptr` 不仅仅可以表示空指针的值, 它还有一个独立的类型 `std::nullptr_t`. 当然这一类型的所有实例都相同, 即都是空指针.

空指针类型并不很常用. 它允许引入针对空指针类型的重载. 如

```
void f(int* p) { std::cout << "overload int ptr" << std::endl; }
void f(std::nullptr_t) { std::cout << "overload nullptr" << std::endl; }

int main()
{
    f(nullptr);       // 输出 overload nullptr

    int* p = nullptr; // 虽然 p 是空指针, 但其类型是 int*
    f(p);             // 输出 overload int ptr

    // 可以使用 nullptr_t 定义对象实例, 这些实例都是空指针
    std::nullptr_t q;
    f(q); // 输出 overload nullptr
    return 0;
}
```
