C++03 中, 在函数签名中可以增加一个 `throw(except_a, except_b, /* ... */)` 的抛出声明, 表示函数只会抛出这些异常类型, 而一个空的 `throw()` 表示函数不会抛出异常. 如

```
void f() throw(std::runtime_error); // f 可能抛出 std::runtime_error, 不可能抛出其他类型异常
void g() throw();                   // g 不会抛出任何异常
```

而 C++11 中新增了关键字 `noexcept`, 其功能之一是将上述抛出声明简化为二元形式, 即可能抛出, 或不可能抛出. 其语法形式是在函数签名最后加上 `noexcept(bool 常量)`, 该参数 `bool` 常量表示此函数是否**不**会抛出异常, 这一常量默认为 `true` (但如果根本不写 `noexcept` 的话, 表示该函数可以抛出异常).

```!
void f() noexcept(true);     // f 不会抛出异常
void g(int) noexcept(false); // g 可能抛出异常
void h() noexcept            // h 不会抛出异常; 这时不需要圆括号
void k();                    // 什么也不写: k 可能抛出异常
```

声明一个函数不会抛出异常有利于编译器生成更简单的可执行文件. 但如果一个带有 `noexcept(true)` 声明的函数中直接或间接抛出了异常, `std::terminate` 会被立即调用, 默认情况下意味着进程将马上结束.

该关键字的另一作用是在编译时评估一个函数调用是否会抛出异常, 并返回一个 `bool` 值常量. 这个函数表达式只在编译时使用, 不会被运行求值, 类似 `sizeof` 一样.

```
// 沿用上面的定义
std::cout << noexcept(f()) << std::endl;  // 1
std::cout << noexcept(g(0)) << std::endl; // 0
```

将这两者结合起来, 可以实现一个需求: 如果函数 X 中只调用了函数 Y, 那么函数 X 是否抛出异常取决于 Y 是否抛出异常. 写成代码是这样的

```
void f() noexcept;

void g() noexcept(noexcept(f()))
//                ^^^^^^^^^^^^^  f 不会抛出异常, 故此表达式为 true
//       noexcept(    true     ) 因此这里等价于声明此函数不抛出异常
{
    f();
}

template <typename T>            // 泛型中的运用
void h() noexcept(noexcept(T())) // h 函数是否抛出异常取决于 T 类型构造时产生异常
{ /* ... */ }
```

这是一个美好的愿景, 但在实际运用时, 如果要将一个函数所有调用的其他函数都写进 `noexcept` 声明中的话, 推广这一声明是极其困难甚至不可能完成的. 最坏的情况下甚至可能在 `noexcept` 里的部分相当于把整个函数重新实现一遍.

因此, 实际上只有一些很简单的函数才会加上这一声明. 另外, 析构函数默认都带有 `noexcept(true)` 声明.

需要注意的是, 使用 `noexcept(true)` 以及 `throw()` 声明都不会强制编译器检查函数是否真的不会抛出异常, 比如以下代码

```
void f(int x) noexcept
{
    if (x < 0) {
        throw std::out_of_range("");
    }
}
```

虽然在函数体中很明确地有一句 `throw`, 但是编译器并不会在处理这段代码时报错.
