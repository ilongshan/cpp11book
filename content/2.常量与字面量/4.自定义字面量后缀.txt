在 C 语言中, 程序员可以使用后缀来指定一个字面常量的类型, 比如以下的代码

```
printf("%lld\n", -1);   // 错误: 常数 -1 压栈时只会占用一个 int 类型的空间, 少于一个 long long 类型的部分将是未初始化的栈空间
printf("%lld\n", -1LL); // 正确输出 -1
```

可以被指定后缀的类型仅限于对整型类型的修饰, 譬如上面的 `LL`, 或者加上 `U` 表示无符号. 在 C++11 中, 这个功能被开放了, 可以自定义一些后缀置于字面常量之后, 改变该字面常量的特性.

```!
// 定义一个指定后缀的函数重载, operator "" 为语法固定部分, 后缀为 _s
std::string operator "" _s (char const* m, std::size_t)
{
    return std::string(m);
}

auto r = "hello, world"_s;
// 其中 "hello, world" 为原始字面量, _s 为后缀
// 表达式 "hello, world"_s 的类型为 string
// 因此定义的 r 为 string 类型而不是 char const*
```

自定义后缀实际上与算符重载并无任何关系, 只是它借用了算符重载的语法 (这一算符重载不可以被定义为类的成员函数, 只能定义在全局或任何名字空间下), 其中在返回值类型之后的 `operator ""` 是固定成分, 之后为自定义的后缀名, 接下来是参数列表和函数体.

使用自定义后缀等价于在该表达式位置调用该自定义后缀函数, 如上述定义等价于

```
auto r = operator "" _s("hello, world", 13); // 13 为字符串 "hello, world" 的字符个数, 含 nul
//       ^^^^^^^^^^^^^^ 这一段相当于其函数名
```

为了防止定义的后缀重复, 实际项目中建议在名字空间内定义后缀, 避免污染全局空间, 需要使用时在源码中 `using` 之, 如

```
namespace strliteral {

    std::string operator "" _s (char const* m, std::size_t)
    {
        return std::string(m);
    }

}

int main()
{
    // 可以 using 整个名字空间, 或者用以下语法仅导入个别后缀
    using strliteral::operator "" _s;
    std::cout << "hello, "_s + "world"_s << std::endl;
    return 0;
}
```

自定义字面量有一些规定

* 后缀以下划线开头 (C++11 中不强制, 但以后的标准中会要求, 以区分于原生的 `L` `U` 等后缀和标准库中定义的后缀)
* 使用时原生字面常量与后缀之间不能有空格

后一规定隐含了不能在自定义字面量的基础上继续定义自定义字面量, 不然后缀标识符会连在一起无法区分. 比如

```
unsigned long long operator "" _000 (unsigned long long n)
{
    return n * 1000;
}

auto x = 10_000;          // x 为 10,000 ; '_000' 是匹配上面定义的后缀
// auto y = 10_000_000;   // 错误, _000 后缀模式不可重复
// auto y = 10 _000 _000; // 错误, 原始字面量与后缀之间不能有空格

// 可另定义一个后缀, 表示百万
unsigned long long operator "" _000_000 (unsigned long long n)
{
    return n * 1000 * 1000;
}

auto z = 10_000_000;      // z 为 10,000,000
```

而由于原生字面常量也只有那么几种, 因此自定义字面量的函数重载的参数列表只能是下面几种

|! 参数列表 | 匹配原生字面常量 | 调用举例
| `(CHAT_TYPE const*, std::size_t)` | 字符串常量; `CHAT_TYPE` 可能是 `char` `wchat_t` `char16_t` `char32_t` 之一; `size_t` 参数指出该字符串字面量的字符数量, 计入 nul | `"hello"_s`
| `(char const*)` | 形如 `10_suffix` 的表达式, 将前方的数字以字符串形式传入, 等价于 `operator "" _s("10")` | `10_km`
| `(unsigned long long int)` | 也匹配形如 `10_suffix` 的表达式 (如果是带一个符号的整数字面量, 那么先将整数传给重载函数, 然后符号应用于返回的结果) | `10_km`
| `(long double)` | 浮点数 | `2.718_percent`
| `(CHAT_TYPE)` | 单个字符; `CHAT_TYPE` 与第一条中的字符类型一致 | `U'c'_encode`

以 `char const*` 为参数的重载也能匹配以整数或浮点数为原始字面常量的变换, 同时定义时, 只有接受数值类型的重载会被调用, 当然一般也不会同时定义两个. 这一重载还有个变种形式

```
template <char... ch>
RETURN_TYPE operator "" _SUFFIX()
{
    /* ... */
}
```

函数本身无参数, 而可变模板参数 `char... ch` 则是数字字面常量部分的各个字符. 这一部分的内容将在后文 "可变参数模板" 一章中说明.

以整数常量或浮点数常量为原始变量时, 如果这个变量是带符号的, 那么这个单目运算符的优先级要低于后缀 (用 `operator` 重载的形式来自定义字面量还是有缘由的). 但这一点有时会引起误用, 比如为 "温度" 这个概念定义一个 "摄氏度" 的后缀

```
struct Temperature {
    long degree;

    explicit Temperature(long t)
        : degree(t)
    {}

    // ...
    // 没有其他算符重载
};

Temperature operator "" _c (unsigned long long t)
{
    return Temperature(t + 273);
}

int main()
{
    // 错误: 表达式 57_c 的类型是 Temperature, 无法为其加上前置负号
    Temperature co2_bolling_point = -57_c;
    return 0;
}
```

如果希望以上写法成立, 就必须再为 `Temperature` 重载前置负号操作符; 不能用括号括起前面的 `-57` 写成 `(-57)_c`, 这并不是正确的自定义字面量语法.

但是, 如果这种情况下加上如下定义

```
struct Temperature {
    long degree;

    explicit Temperature(long t)
        : degree(t)
    {}

    Temperature operator-() const
    {
        return Temperature(-this->degree);
    }

    // ...
};
```

虽然语法上正确, 可以写 `-57_c` 这样的表达式, 但是语义严重错误, 因为这样会先计算 `57_c` 得到一个 `degree` 为 330 的实例, 然后运用负号算符构造出 `degree` 为 -330 的实例, 与初衷 (构造表示零下 57 度的实例) 相去甚远. 因此这种情况下, 使用构造函数调用如 `Temperature(-57)` 是不错的做法.

自定义字面量这一特性虽然名字上叫做 "字面量", 但切不可将其与字面**常量**混为一谈, 它的求值过程默认情况下是运行时的. 而若有需要编译器将其结果视作编译时常量, 则需要用到 `constexpr` 来修饰它. 而另一个前提是其返回值类型 `Temperature` 是字面类型. 根据这些条件, 可将代码修改成下面这样

```
struct Temperature {
    long degree;

    // 构造函数加上 constexpr 修饰
    constexpr explicit Temperature(long t)
        : degree(t)
    {}

    // ...

    // 不要有析构函数定义
};

// 也加上 constexpr 修饰
constexpr Temperature operator "" _c (unsigned long long t)
{
    return Temperature(t + 273);
}

int main()
{
    // 万事俱备, 可以用来定义编译时常量了
    constexpr Temperature water_bolling_point = 100_c;
    static_assert(water_bolling_point.degree == 373,
                  "I'm supposed to work under a standard atmosphere");
    return 0;
}
```

如果只是想验证函数编写得对不对, 而不用在之后的代码中继续使用 `water_bolling_point` 这个常量, 那么是否可以这么简写呢?

```
static_assert(100_c.degree == 373,
              "I'm supposed to work under a standard atmosphere");
```

虽然看起来好像完全没问题, 但实际上不行, 而且编译器给出的错误信息会让人匪夷所思

```
error: unable to find numeric literal operator ‘operator"" _c.degree’
     static_assert(100_c.degree == 373,
                   ^
```

在给出的错误信息中, 编译器显然认为 `_c.degree` 是一个整体, 而尝试去找这样的后缀函数重载. 显然不可能存在这样的重载, 因为后缀算符重载不能作为某个类的成员函数定义, 而且即使作为名字空间内的函数定义, 也不存在如 `100_literal::_c` 的带名字空间的写法.

要解决这个 "错误" 当然不困难, 只要在字面量两边套上一层括号即可, 如 `(100_c).degree`, 这也是推荐的编码方式.

造成以上编译错误的原因也并不是编译器实现本身的问题. 实际上这个问题与编译器对数值字面常量处理有关.

这里举一些数值字面常量的简单例子, 它们都是正确的

```
1e-5
0x1ULL
1e+7L
```

再举一些**错误**的字面常量的例子

```
1..0
1e++5
1e+5.5
```

第一个错误的原因不难发现, 是小数点太多了, 第二个是指数中加号多出来一个, 第三个是指数带了小数点. 总之错误都一目了然.

那么, 各位读者, 若你们认同此处用**一目了然**这个词, 不妨考虑一下, 对于编译器来说是否也应当是一 "目" 了然? 如果编译器要做到一目了然地报错, 应当采取哪些措施呢?

在实现时, 编译器词法分析处理到 `1..0` 有两种选择:

* 采用 "正确" 方式, 将它分解为 `1.` 和 `.0` 两个词法元素 (token), 两者都是正确的字面常量, 之后语法分析时报错
* 用**最长适配** (maximal munch) 策略先把这一整个输入都解析为一个词元, 再分析这个词元, 并报词法错误

在这个简单例子里, 采用两者报错似乎都差不多, 至少数量上都是 1 个错误, 而且错误也应该都比较好懂.

但是后面的例子呢? 比如 `1e++5` 这个, 如果词法分析时一定要正确分词, 那么分得的词元将依次是 `1`, `e`, `++`, `5`, 语法分析器一看这一排什么鬼, 至少会报 2 个语法错误

* 字面常量 `1` 后面不应该跟一个标识符 `e`
* `++` 运算符不是双目运算符之后不能再放一个 `5`

这样就非常地不 "一目了然" 了. 所以在实现时, 编译器往往在词法分析时就尽量采用最长适配策略将一段输入尽可能揉成一个词元, 然后再抽取其中的子项. 对于数值字面量来说, 其规则大致是

* 所有以数字, 或点号加数字开头
* 后面接任意多个数字, 字母, 下划线, 点号, 加号或减号

先姑且全部拿下作为一个数, 然后再慢慢抽取其中的底数指数后缀. 不过这个策略有时就会造成误判, 如 `100_c.degree` 就满足上面这两个条件, 所以前面的底数部分 `100` 解析完之后, `_c.degree` 整个被拿出来当作了一个后缀.

除了以上情形之外, 这种写法也会踩到坑

```
int foo = 0;
int bar = 0xe+foo; // 错误
```

其中 `0xe+foo` 会被认为是一整个字面量, 而非 `0xe` 加上 `foo`. 当然, 在双目运算符前后加上空格是良好编码风格的表现之一, 遵循此风格就不会出现这种错误了.
