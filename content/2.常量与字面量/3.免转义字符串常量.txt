C++11 中开始支持免转义以及多行字符串字面量来降低在源代码中编写复杂文本内容的难度. 其形式为

```
R"自定义分隔符(任意字符内容)自定义分隔符"
```

其中 "自定义分隔符" 可以是任意内容, 圆括号前后的两部分自定义分隔符必须相同. 比如

```
auto x = R"delim(Print "hello, world".)delim";
//               ^^^^^^^^^^^^^^^^^^^^^
// 字符串内容为圆括号中间的部分, 不含圆括号, 双引号不会引起字符串结束
// 必须由一个反圆括号, 分隔符, 引号结束
std::cout << x << std::endl;

/* 输出

Print "hello, world".

输出结束 */
```

如果要指定编码前缀, 这个前缀要出现在 `R` 之前, 如

```
auto x = u8R"""(汉字)"""; // 正确, 等价于 u8"汉字"
auto y = Ru8"""(汉字)"""; // 错误, u8 前缀必须出现在 R 之前
```

此外, 这种方式还可以定义多行字符串, 比如

```
auto x = R"""(
hello
world
)""";
// 等价于 "\nhello\nworld\n", 请注意开始的圆括号之后和结束的圆括号之前的换行符也计入

auto y = R"""(
 ________   _____     _____    ________  ________
/       |   |   |     |   |   /       | /       |
|       | --'   '-- --'   '-- |_      | |_      |
|     --  |       | |       |   |     |   |     |
|       | --.   .-- --.   .--   |     |   |     |
\_______|   |___|     |___|     |_____|   |_____|
)""";
// 请注意最后一行文本第一个字符反斜线 (\) 不再有转义功能, 而被作为普通字符进入字符串定义

std::cout << x << std::endl;
std::cout << "====" << std::endl;
std::cout << y << std::endl;

/* 输出

(空行)
hello
world
(空行)
====
(空行)
 ________   _____     _____    ________  ________
/       |   |   |     |   |   /       | /       |
|       | --'   '-- --'   '-- |_      | |_      |
|     --  |       | |       |   |     |   |     |
|       | --.   .-- --.   .--   |     |   |     |
\_______|   |___|     |___|     |_____|   |_____|
(空行)

输出结束 */
```
